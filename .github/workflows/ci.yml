name: CI
on:
  push:
    branches:
      - master
      - release-[4-9].*
  pull_request:
    branches-ignore:
      - release-[0-3].*
  pull_request_target:
    branches-ignore:
      - release-[0-3].*
  workflow_dispatch:
env:
  DOTNET_NOLOGO: true
jobs:
  build:
    if:
      (github.event_name == 'pull_request_target' && github.event.pull_request.user.login == 'dependabot[bot]') ||
      (github.event_name == 'pull_request' && github.event.pull_request.user.login != 'dependabot[bot]') ||
      github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-2019
            name: Windows
          - os: ubuntu-20.04
            name: Linux
      fail-fast: false
    steps:
      - name: Check for secrets
        env:
          SECRETS_AVAILABLE: ${{ secrets.SECRETS_AVAILABLE }}
        shell: pwsh
        run: exit $(If ($env:SECRETS_AVAILABLE -eq 'true') { 0 } Else { 1 })
      - name: Checkout
        if: github.event_name != 'pull_request_target'
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0
      - name: Checkout for Dependabot
        if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v2.3.4
        with:
          ref: 'refs/pull/${{ github.event.number }}/merge'
          fetch-depth: 0
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: 5.0.x
      - name: Setup .NET Core 3.1 runtime
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: 3.1.x
      - name: Build
        run: dotnet build src --configuration Release
      - name: Upload packages
        if: matrix.name == 'Windows'
        uses: actions/upload-artifact@v2.2.2
        with:
          name: NuGet packages
          path: nugets/
          retention-days: 7
      - name: Azure login
        uses: azure/login@v1.3.0
        with:
          creds: ${{ secrets.AZURE_ACI_CREDENTIALS }}
      - name: Install Particular.GitHubActionsTool
        run: dotnet tool install -g Particular.GitHubActionsTool --add-source https://www.myget.org/F/particular/api/v3/index.json
      - name: Setup SQL Server
        id: infra
        shell: pwsh
        run: |
          $hostname = "psw-mssql-$(Get-Random)"
          echo "::set-output name=sqlinstance::$hostname"
          echo "Creating SQL Server container $hostname (This can take awhile.)"
          $details = az container create --image mcr.microsoft.com/mssql/server:2019-CU10-ubuntu-20.04  --name $hostname --resource-group GitHubActions-RG --cpu 1 --memory 3.5 --port 1433 --ip-address public -e ACCEPT_EULA=Y MSSQL_SA_PASSWORD=${{ secrets.ACI_MSSQL_PASSWORD }} MSSQL_PID=Developer MSSQL_COLLATION=SQL_Latin1_General_CP1_CS_AS MSSQL_ENABLE_HADR=Y --dns-name-label $hostname | ConvertFrom-Json

          $domain=$details.ipAddress.fqdn
          echo "::add-mask::$domain"

          echo "Tagging container image"
          $dateTag = "Created=$(Get-Date -Format "yyyy-MM-dd")"
          $ignore = az tag create --resource-id $details.id --tags Package=SqlTransport RunnerOS=${{ runner.os }} $dateTag

          actions-tool dbinit mssql --server $domain --password ${{ secrets.ACI_MSSQL_PASSWORD }} --env-var-name SqlServerTransportConnectionString --script-file src/Scripts/Create-Databases.sql
      - name: Run Windows tests
        if: matrix.name == 'Windows'
        # -m:1 parameter prevents test projects from being run in parallel, since multiple test projects share the same tests
        run: dotnet test src --configuration Release --no-build --logger "GitHubActions;report-warnings=false" -m:1
      - name: Run Linux tests
        if: matrix.name == 'Linux'
        # -m:1 parameter prevents test projects from being run in parallel, since multiple test projects share the same tests
        run: dotnet test src --configuration Release --no-build --framework netcoreapp3.1 -m:1 --logger "GitHubActions;report-warnings=false"
      - name: Teardown SQL Server
        if: ${{ always() }}
        shell: pwsh
        run: |
          $ignore = az container delete --resource-group GitHubActions-RG --name ${{ steps.infra.outputs.hostname }} --yes