[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute(@"NServiceBus.SqlServer.AcceptanceTests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100d5a2fc697d5277272662d3154a752010b3de6d598204c10c4b09ebb28b469640efcf04978e95a15f4e0461f02316c96b349083a2e2a4f07fe7dfb713b99189b634473c73c1387149a37dbc836028bc2ca21de196bbd374f4024b920a0da86fe47bf541771352246cd8ef54d48654f39f4073aa114b70dc7d4712c3d9dd83faad")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute(@"NServiceBus.SqlServer.IntegrationTests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100dde965e6172e019ac82c2639ffe494dd2e7dd16347c34762a05732b492e110f2e4e2e1b5ef2d85c848ccfb671ee20a47c8d1376276708dc30a90ff1121b647ba3b7259a6bc383b2034938ef0e275b58b920375ac605076178123693c6c4f1331661a62eba28c249386855637780e3ff5f23a6d854700eaa6803ef48907513b92")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute(@"NServiceBus.SqlServer.TransportTests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100dde965e6172e019ac82c2639ffe494dd2e7dd16347c34762a05732b492e110f2e4e2e1b5ef2d85c848ccfb671ee20a47c8d1376276708dc30a90ff1121b647ba3b7259a6bc383b2034938ef0e275b58b920375ac605076178123693c6c4f1331661a62eba28c249386855637780e3ff5f23a6d854700eaa6803ef48907513b92")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute(@"NServiceBus.SqlServer.UnitTests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100dde965e6172e019ac82c2639ffe494dd2e7dd16347c34762a05732b492e110f2e4e2e1b5ef2d85c848ccfb671ee20a47c8d1376276708dc30a90ff1121b647ba3b7259a6bc383b2034938ef0e275b58b920375ac605076178123693c6c4f1331661a62eba28c249386855637780e3ff5f23a6d854700eaa6803ef48907513b92")]
[assembly: System.Runtime.InteropServices.ComVisibleAttribute(false)]
namespace NServiceBus
{
    public class static MessageDrivenPubSubCompatibility
    {
        [System.ObsoleteAttribute("Publishing can not be disabled in version 5.0 and above. The transport handles pu" +
            "blish-subscribe natively and does not require a separate subscription persistenc" +
            "e. The member currently throws a NotImplementedException. Will be removed in ver" +
            "sion 6.0.0.", true)]
        public static void DisablePublishing(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions) { }
        [System.ObsoleteAttribute(@"Publisher registration has been moved to message-driven pub-sub migration mode.\r\n\r\nvar compatMode = transport.EnableMessageDrivenPubSubCompatibilityMode();\r\ncompatMode.RegisterPublisher(eventType, publisherEndpoint);. Use `SubscriptionMigrationModeSettings.RegisterPublisher(routingSettings, eventType, publisherEndpoint)` instead. The member currently throws a NotImplementedException. Will be removed in version 6.0.0.", true)]
        public static void RegisterPublisher(this NServiceBus.RoutingSettings<NServiceBus.SqlServerTransport> routingSettings, System.Type eventType, string publisherEndpoint) { }
        [System.ObsoleteAttribute(@"Publisher registration has been moved to message-driven pub-sub migration mode.\r\n\r\nvar compatMode = transport.EnableMessageDrivenPubSubCompatibilityMode();\r\ncompatMode.RegisterPublisher(assembly, publisherEndpoint);. Use `SubscriptionMigrationModeSettings.RegisterPublisher(routingSettings, assembly, publisherEndpoint)` instead. The member currently throws a NotImplementedException. Will be removed in version 6.0.0.", true)]
        public static void RegisterPublisher(this NServiceBus.RoutingSettings<NServiceBus.SqlServerTransport> routingSettings, System.Reflection.Assembly assembly, string publisherEndpoint) { }
        [System.ObsoleteAttribute(@"Publisher registration has been moved to message-driven pub-sub migration mode.\r\n\r\nvar compatMode = transport.EnableMessageDrivenPubSubCompatibilityMode();\r\ncompatMode.RegisterPublisher(assembly, namespace, publisherEndpoint);. Use `SubscriptionMigrationModeSettings.RegisterPublisher(routingSettings, assembly, namespace, publisherEndpoint)` instead. The member currently throws a NotImplementedException. Will be removed in version 6.0.0.", true)]
        public static void RegisterPublisher(this NServiceBus.RoutingSettings<NServiceBus.SqlServerTransport> routingSettings, System.Reflection.Assembly assembly, string @namespace, string publisherEndpoint) { }
        [System.ObsoleteAttribute(@"Subscription authorization has been moved to message-driven pub-sub migration mode. \r\n\r\nvar compatMode = transport.EnableMessageDrivenPubSubCompatibilityMode();\r\ncompatMode.SubscriptionAuthorizer(authorizer);. Use `SubscriptionMigrationModeSettings.SubscriptionAuthorizer(transportExtensions, authorizer)` instead. The member currently throws a NotImplementedException. Will be removed in version 6.0.0.", true)]
        public static void SubscriptionAuthorizer(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, System.Func<NServiceBus.Pipeline.IIncomingPhysicalMessageContext, bool> authorizer) { }
    }
    public class SqlServerTransport : NServiceBus.Transport.TransportDefinition
    {
        public SqlServerTransport() { }
        public override string ExampleConnectionStringForErrorMessage { get; }
        public override bool RequiresConnectionString { get; }
        public override NServiceBus.Transport.TransportInfrastructure Initialize(NServiceBus.Settings.SettingsHolder settings, string connectionString) { }
    }
}
namespace NServiceBus.Transport.SqlServer
{
    public class DelayedDeliverySettings
    {
        public DelayedDeliverySettings() { }
        public void BatchSize(int batchSize) { }
        public void DisableTimeoutManagerCompatibility() { }
        public void ProcessingInterval(System.TimeSpan interval) { }
        public void TableSuffix(string suffix) { }
    }
    public class static MessageDrivenPubSubCompatibilityModeConfiguration
    {
        public static NServiceBus.SubscriptionMigrationModeSettings EnableMessageDrivenPubSubCompatibilityMode(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions) { }
    }
    public class static SendOptionsExtensions
    {
        [System.ObsoleteAttribute("The connection parameter is no longer required. Use `UseCustomSqlTransaction` ins" +
            "tead. The member currently throws a NotImplementedException. Will be removed in " +
            "version 6.0.0.", true)]
        public static void UseCustomSqlConnectionAndTransaction(this NServiceBus.SendOptions options, System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlTransaction transaction) { }
        public static void UseCustomSqlTransaction(this NServiceBus.SendOptions options, System.Data.SqlClient.SqlTransaction transaction) { }
    }
    [System.ObsoleteAttribute("Not for public use.")]
    public class static SqlConstants
    {
        public static readonly string AddMessageBodyStringColumn;
        public static readonly string CheckHeadersColumnType;
        public static readonly string CheckIfExpiresIndexIsPresent;
        public static readonly string CreateDelayedMessageStoreText;
        public static readonly string CreateQueueText;
        public static readonly string CreateSubscriptionTableText;
        public static readonly string GetSubscribersText;
        public static readonly string MoveDueDelayedMessageText;
        public static readonly string PeekText;
        public static readonly string PurgeBatchOfExpiredMessagesText;
        public static readonly string PurgeText;
        public static readonly string ReceiveText;
        public static readonly string SendText;
        public static readonly string StoreDelayedMessageText;
        public static readonly string SubscribeText;
        public static readonly string UnsubscribeText;
    }
    public class static SqlServerTransportSettingsExtensions
    {
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> CreateMessageBodyComputedColumn(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> DefaultSchema(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, string schemaName) { }
        public static NServiceBus.Transport.SqlServer.DelayedDeliverySettings NativeDelayedDelivery(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> PurgeExpiredMessagesOnStartup(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, System.Nullable<int> purgeBatchSize) { }
        public static NServiceBus.Transport.SqlServer.SubscriptionSettings SubscriptionSettings(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> TimeToWaitBeforeTriggeringCircuitBreaker(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, System.TimeSpan waitTime) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> TransactionScopeOptions(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, System.Nullable<System.TimeSpan> timeout = null, System.Nullable<System.Transactions.IsolationLevel> isolationLevel = null) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> UseCatalogForEndpoint(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, string endpointName, string catalog) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> UseCatalogForQueue(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, string queueName, string catalog) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> UseCustomSqlConnectionFactory(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, System.Func<System.Threading.Tasks.Task<System.Data.SqlClient.SqlConnection>> sqlConnectionFactory) { }
        [System.ObsoleteAttribute("Starting from version 5 native delayed delivery is always enabled. It can be conf" +
            "igured via NativeDelayedDelivery. Use `NativeDelayedDelivery` instead. The membe" +
            "r currently throws a NotImplementedException. Will be removed in version 6.0.0.", true)]
        public static NServiceBus.Transport.SqlServer.DelayedDeliverySettings UseNativeDelayedDelivery(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> UseSchemaForEndpoint(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, string endpointName, string schema) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> UseSchemaForQueue(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, string queueName, string schema) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> WithPeekDelay(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, System.Nullable<System.TimeSpan> delay = null) { }
    }
    public class SubscriptionSettings
    {
        public SubscriptionSettings() { }
        public void CacheSubscriptionInformationFor(System.TimeSpan timeSpan) { }
        public void DisableSubscriptionCache() { }
        public void SubscriptionTableName(string tableName, string schemaName = null, string catalogName = null) { }
    }
}