[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Transport.PostgreSql.AcceptanceTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Transport.PostgreSql.TransportTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Transport.PostgreSql.UnitTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
namespace NServiceBus
{
    public static class EndpointAddressConfiguration
    {
        public static void UseSchemaForEndpoint(this NServiceBus.RoutingSettings settings, string endpointName, string schema) { }
    }
    public class PostgreSqlTransport : NServiceBus.Transport.TransportDefinition
    {
        public PostgreSqlTransport(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<Npgsql.NpgsqlConnection>> connectionFactory) { }
        public PostgreSqlTransport(string connectionString) { }
        public System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<Npgsql.NpgsqlConnection>> ConnectionFactory { get; }
        public string ConnectionString { get; }
        public bool CreateMessageBodyComputedColumn { get; set; }
        public string DefaultSchema { get; set; }
        public NServiceBus.Transport.PostgreSql.DelayedDeliveryOptions DelayedDelivery { get; }
        public NServiceBus.QueuePeekerOptions QueuePeeker { get; }
        public NServiceBus.Transport.PostgreSql.QueueSchemaOptions Schema { get; }
        public NServiceBus.Transport.PostgreSql.SubscriptionOptions Subscriptions { get; }
        public System.TimeSpan TimeToWaitBeforeTriggeringCircuitBreaker { get; set; }
        public NServiceBus.TransactionScopeOptions TransactionScope { get; }
        public override System.Collections.Generic.IReadOnlyCollection<NServiceBus.TransportTransactionMode> GetSupportedTransactionModes() { }
        public override System.Threading.Tasks.Task<NServiceBus.Transport.TransportInfrastructure> Initialize(NServiceBus.Transport.HostSettings hostSettings, NServiceBus.Transport.ReceiveSettings[] receivers, string[] sendingAddresses, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public static class PostgreSqlTransportSettingsExtensions
    {
        public static NServiceBus.TransportExtensions<NServiceBus.PostgreSqlTransport> ConnectionString(this NServiceBus.TransportExtensions<NServiceBus.PostgreSqlTransport> transportExtensions, string connectionString) { }
        public static NServiceBus.TransportExtensions<NServiceBus.PostgreSqlTransport> CreateMessageBodyComputedColumn(this NServiceBus.TransportExtensions<NServiceBus.PostgreSqlTransport> transportExtensions) { }
        public static NServiceBus.TransportExtensions<NServiceBus.PostgreSqlTransport> DefaultSchema(this NServiceBus.TransportExtensions<NServiceBus.PostgreSqlTransport> transportExtensions, string schemaName) { }
        public static NServiceBus.Transport.PostgreSql.DelayedDeliverySettings NativeDelayedDelivery(this NServiceBus.TransportExtensions<NServiceBus.PostgreSqlTransport> transportExtensions) { }
        public static NServiceBus.TransportExtensions<NServiceBus.PostgreSqlTransport> QueuePeekerOptions(this NServiceBus.TransportExtensions<NServiceBus.PostgreSqlTransport> transportExtensions, System.TimeSpan? delay = default, int? peekBatchSize = default) { }
        public static NServiceBus.Transport.PostgreSql.SubscriptionSettings SubscriptionSettings(this NServiceBus.TransportExtensions<NServiceBus.PostgreSqlTransport> transportExtensions) { }
        public static NServiceBus.TransportExtensions<NServiceBus.PostgreSqlTransport> TimeToWaitBeforeTriggeringCircuitBreaker(this NServiceBus.TransportExtensions<NServiceBus.PostgreSqlTransport> transportExtensions, System.TimeSpan waitTime) { }
        public static NServiceBus.TransportExtensions<NServiceBus.PostgreSqlTransport> TransactionScopeOptions(this NServiceBus.TransportExtensions<NServiceBus.PostgreSqlTransport> transportExtensions, System.TimeSpan? timeout = default, System.Transactions.IsolationLevel? isolationLevel = default) { }
        public static NServiceBus.TransportExtensions<NServiceBus.PostgreSqlTransport> UseCustomSqlConnectionFactory(this NServiceBus.TransportExtensions<NServiceBus.PostgreSqlTransport> transportExtensions, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<Npgsql.NpgsqlConnection>> sqlConnectionFactory) { }
        public static NServiceBus.TransportExtensions<NServiceBus.PostgreSqlTransport> UseSchemaForEndpoint(this NServiceBus.TransportExtensions<NServiceBus.PostgreSqlTransport> transportExtensions, string endpointName, string schema) { }
        public static NServiceBus.TransportExtensions<NServiceBus.PostgreSqlTransport> UseSchemaForQueue(this NServiceBus.TransportExtensions<NServiceBus.PostgreSqlTransport> transportExtensions, string queueName, string schema) { }
        public static NServiceBus.TransportExtensions<NServiceBus.PostgreSqlTransport> UseTransport<T>(this NServiceBus.EndpointConfiguration config)
            where T : NServiceBus.PostgreSqlTransport { }
    }
    public class QueuePeekerOptions
    {
        public System.TimeSpan Delay { get; set; }
        public int? MaxRecordsToPeek { get; set; }
    }
    public class TransactionScopeOptions
    {
        public System.Transactions.IsolationLevel IsolationLevel { get; set; }
        public System.TimeSpan Timeout { get; set; }
    }
}
namespace NServiceBus.Transport.PostgreSql
{
    public class DelayedDeliveryOptions
    {
        public int BatchSize { get; set; }
        public string TableSuffix { get; set; }
    }
    public class DelayedDeliverySettings
    {
        public void BatchSize(int batchSize) { }
        public void TableSuffix(string suffix) { }
    }
    public class QueueSchemaOptions
    {
        public void UseSchemaForQueue(string queueName, string schema) { }
    }
    public class SubscriptionOptions
    {
        public SubscriptionOptions() { }
        public System.TimeSpan CacheInvalidationPeriod { get; set; }
        public bool DisableCaching { get; set; }
        public NServiceBus.Transport.PostgreSql.SubscriptionTableName SubscriptionTableName { get; set; }
    }
    public class SubscriptionSettings
    {
        public void CacheSubscriptionInformationFor(System.TimeSpan timeSpan) { }
        public void DisableSubscriptionCache() { }
        public void SubscriptionTableName(string tableName, string schemaName = null) { }
    }
    public class SubscriptionTableName
    {
        public SubscriptionTableName(string table, string schema = null) { }
    }
}