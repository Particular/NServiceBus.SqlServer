[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Transport.SqlServer.AcceptanceTests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100d5a2fc697d5277272662d3154a752010b3de6d598204c10c4b09ebb28b469640efcf04978e95a15f4e0461f02316c96b349083a2e2a4f07fe7dfb713b99189b634473c73c1387149a37dbc836028bc2ca21de196bbd374f4024b920a0da86fe47bf541771352246cd8ef54d48654f39f4073aa114b70dc7d4712c3d9dd83faad")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Transport.SqlServer.IntegrationTests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100dde965e6172e019ac82c2639ffe494dd2e7dd16347c34762a05732b492e110f2e4e2e1b5ef2d85c848ccfb671ee20a47c8d1376276708dc30a90ff1121b647ba3b7259a6bc383b2034938ef0e275b58b920375ac605076178123693c6c4f1331661a62eba28c249386855637780e3ff5f23a6d854700eaa6803ef48907513b92")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Transport.SqlServer.TransportTests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100dde965e6172e019ac82c2639ffe494dd2e7dd16347c34762a05732b492e110f2e4e2e1b5ef2d85c848ccfb671ee20a47c8d1376276708dc30a90ff1121b647ba3b7259a6bc383b2034938ef0e275b58b920375ac605076178123693c6c4f1331661a62eba28c249386855637780e3ff5f23a6d854700eaa6803ef48907513b92")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Transport.SqlServer.UnitTests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100dde965e6172e019ac82c2639ffe494dd2e7dd16347c34762a05732b492e110f2e4e2e1b5ef2d85c848ccfb671ee20a47c8d1376276708dc30a90ff1121b647ba3b7259a6bc383b2034938ef0e275b58b920375ac605076178123693c6c4f1331661a62eba28c249386855637780e3ff5f23a6d854700eaa6803ef48907513b92")]
[assembly: System.Runtime.InteropServices.ComVisible(false)]
namespace NServiceBus
{
    public static class EndpointAddressConfiguration
    {
        public static void UseCatalogForEndpoint(this NServiceBus.RoutingSettings settings, string endpointName, string catalog) { }
        public static void UseSchemaForEndpoint(this NServiceBus.RoutingSettings settings, string endpointName, string schema) { }
    }
    public class ExpiredMessagesPurgerOptions
    {
        public int? PurgeBatchSize { get; set; }
        public bool PurgeOnStartup { get; set; }
    }
    public static class MessageDrivenPubSubCompatibilityModeConfiguration
    {
        public static NServiceBus.SubscriptionMigrationModeSettings EnableMessageDrivenPubSubCompatibilityMode(this NServiceBus.RoutingSettings routingSettings) { }
        [System.Obsolete("EnableMessageDrivenPubSubCompatibilityMode has been obsoleted. Use `RoutingSettin" +
            "gs.EnableMessageDrivenPubSubCompatibilityMode` instead. The member currently thr" +
            "ows a NotImplementedException. Will be removed in version 8.0.0.", true)]
        public static NServiceBus.SubscriptionMigrationModeSettings EnableMessageDrivenPubSubCompatibilityMode(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions) { }
    }
    public static class PublishOptionsExtensions
    {
        public static void UseCustomSqlConnection(this NServiceBus.PublishOptions options, Microsoft.Data.SqlClient.SqlConnection connection) { }
        public static void UseCustomSqlTransaction(this NServiceBus.PublishOptions options, Microsoft.Data.SqlClient.SqlTransaction transaction) { }
    }
    public class QueuePeekerOptions
    {
        public System.TimeSpan Delay { get; set; }
        public int? MaxRecordsToPeek { get; set; }
    }
    public static class SendOptionsExtensions
    {
        public static void UseCustomSqlConnection(this NServiceBus.SendOptions options, Microsoft.Data.SqlClient.SqlConnection connection) { }
        public static void UseCustomSqlTransaction(this NServiceBus.SendOptions options, Microsoft.Data.SqlClient.SqlTransaction transaction) { }
    }
    public class SqlServerTransport : NServiceBus.Transport.TransportDefinition
    {
        public SqlServerTransport(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<Microsoft.Data.SqlClient.SqlConnection>> connectionFactory) { }
        public SqlServerTransport(string connectionString) { }
        public System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<Microsoft.Data.SqlClient.SqlConnection>> ConnectionFactory { get; }
        public string ConnectionString { get; }
        public bool CreateMessageBodyComputedColumn { get; set; }
        public string DefaultSchema { get; set; }
        public NServiceBus.Transport.SqlServer.DelayedDeliveryOptions DelayedDelivery { get; }
        public NServiceBus.ExpiredMessagesPurgerOptions ExpiredMessagesPurger { get; }
        public NServiceBus.QueuePeekerOptions QueuePeeker { get; set; }
        public NServiceBus.Transport.SqlServer.QueueSchemaAndCatalogOptions SchemaAndCatalog { get; }
        public NServiceBus.Transport.SqlServer.SubscriptionOptions Subscriptions { get; }
        public System.TimeSpan TimeToWaitBeforeTriggeringCircuitBreaker { get; set; }
        public NServiceBus.TransactionScopeOptions TransactionScope { get; }
        public override System.Collections.Generic.IReadOnlyCollection<NServiceBus.TransportTransactionMode> GetSupportedTransactionModes() { }
        public override System.Threading.Tasks.Task<NServiceBus.Transport.TransportInfrastructure> Initialize(NServiceBus.Transport.HostSettings hostSettings, NServiceBus.Transport.ReceiveSettings[] receivers, string[] sendingAddresses, System.Threading.CancellationToken cancellationToken = default) { }
        public override string ToTransportAddress(NServiceBus.Transport.QueueAddress address) { }
    }
    public static class SqlServerTransportSettingsExtensions
    {
        [System.Obsolete("CreateMessageBodyComputedColumn has been obsoleted. Use `SqlServerTransport.Creat" +
            "eMessageBodyComputedColumn` instead. The member currently throws a NotImplemente" +
            "dException. Will be removed in version 8.0.0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> CreateMessageBodyComputedColumn(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions) { }
        [System.Obsolete("DefaultSchema has been obsoleted. Use `SqlServerTransport.DefaultSchema` instead." +
            " The member currently throws a NotImplementedException. Will be removed in versi" +
            "on 8.0.0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> DefaultSchema(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, string schemaName) { }
        [System.Obsolete("NativeDelayedDelivery has been obsoleted. Use `SqlServerTransport.DelayedDelivery" +
            "` instead. The member currently throws a NotImplementedException. Will be remove" +
            "d in version 8.0.0.", true)]
        public static NServiceBus.Transport.SqlServer.DelayedDeliverySettings NativeDelayedDelivery(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions) { }
        [System.Obsolete("PurgeExpiredMessagesOnStartup has been obsoleted. Use `SqlServerTransport.PurgeOn" +
            "Startup` instead. The member currently throws a NotImplementedException. Will be" +
            " removed in version 8.0.0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> PurgeExpiredMessagesOnStartup(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, int? purgeBatchSize) { }
        [System.Obsolete("QueuePeekerOptions has been obsoleted. Use `SqlServerTransport.QueuePeeker` inste" +
            "ad. The member currently throws a NotImplementedException. Will be removed in ve" +
            "rsion 8.0.0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> QueuePeekerOptions(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, System.TimeSpan? delay = default, int? peekBatchSize = default) { }
        [System.Obsolete("SubscriptionSettings has been obsoleted. Use `SqlServerTransport.Subscriptions` i" +
            "nstead. The member currently throws a NotImplementedException. Will be removed i" +
            "n version 8.0.0.", true)]
        public static NServiceBus.Transport.SqlServer.SubscriptionSettings SubscriptionSettings(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions) { }
        [System.Obsolete("TimeToWaitBeforeTriggeringCircuitBreaker has been obsoleted. Use `SqlServerTransp" +
            "ort.TimeToWaitBeforeTriggeringCircuitBreaker` instead. The member currently thro" +
            "ws a NotImplementedException. Will be removed in version 8.0.0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> TimeToWaitBeforeTriggeringCircuitBreaker(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, System.TimeSpan waitTime) { }
        [System.Obsolete("TransactionScopeOptions has been obsoleted. Use `SqlServerTransport.TransactionSc" +
            "ope` instead. The member currently throws a NotImplementedException. Will be rem" +
            "oved in version 8.0.0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> TransactionScopeOptions(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, System.TimeSpan? timeout = default, System.Transactions.IsolationLevel? isolationLevel = default) { }
        [System.Obsolete("UseCatalogForEndpoint has been obsoleted. Use `RoutingSettings.UseCatalogForEndpo" +
            "int` instead. The member currently throws a NotImplementedException. Will be rem" +
            "oved in version 8.0.0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> UseCatalogForEndpoint(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, string endpointName, string catalog) { }
        [System.Obsolete("UseCatalogForQueue has been obsoleted. Use `SqlServerTransport.SchemaAndCatalog.U" +
            "seCatalogForQueue` instead. The member currently throws a NotImplementedExceptio" +
            "n. Will be removed in version 8.0.0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> UseCatalogForQueue(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, string queueName, string catalog) { }
        [System.Obsolete("UseCustomSqlConnectionFactory has been obsoleted. Use `SqlServerTransport.Connect" +
            "ionFactory` instead. The member currently throws a NotImplementedException. Will" +
            " be removed in version 8.0.0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> UseCustomSqlConnectionFactory(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, System.Func<System.Threading.Tasks.Task<Microsoft.Data.SqlClient.SqlConnection>> sqlConnectionFactory) { }
        [System.Obsolete("UseSchemaForEndpoint has been obsoleted. Use `RoutingSettings.UseSchemaForEndpoin" +
            "t` instead. The member currently throws a NotImplementedException. Will be remov" +
            "ed in version 8.0.0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> UseSchemaForEndpoint(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, string endpointName, string schema) { }
        [System.Obsolete("UseSchemaForQueue has been obsoleted. Use `SqlServerTransport.SchemaAndCatalog.Us" +
            "eSchemaForQueue` instead. The member currently throws a NotImplementedException." +
            " Will be removed in version 8.0.0.", true)]
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> UseSchemaForQueue(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, string queueName, string schema) { }
    }
    public class TransactionScopeOptions
    {
        public System.Transactions.IsolationLevel IsolationLevel { get; set; }
        public System.TimeSpan Timeout { get; set; }
    }
}
namespace NServiceBus.Transport.SqlServer
{
    public class DelayedDeliveryOptions
    {
        public int BatchSize { get; set; }
        public System.TimeSpan ProcessingInterval { get; set; }
        public string TableSuffix { get; set; }
    }
    [System.Obsolete("DelayedDeliverySettings has been obsoleted. Use `SqlServerTransport.DelayedDelive" +
        "ry` instead. Will be removed in version 8.0.0.", true)]
    public class DelayedDeliverySettings
    {
        public DelayedDeliverySettings() { }
        [System.Obsolete("Timeout manager has been removed from NServiceBus. See the upgrade guide for more" +
            " details. Will be removed in version 8.0.0.", true)]
        public void EnableTimeoutManagerCompatibility() { }
    }
    public class QueueSchemaAndCatalogOptions
    {
        public void UseCatalogForQueue(string queueName, string catalog) { }
        public void UseSchemaForQueue(string queueName, string schema) { }
    }
    public class SubscriptionOptions
    {
        public SubscriptionOptions() { }
        public System.TimeSpan CacheInvalidationPeriod { get; set; }
        public bool DisableCaching { get; set; }
        public NServiceBus.Transport.SqlServer.SubscriptionTableName SubscriptionTableName { get; set; }
    }
    [System.Obsolete("SubscriptionSettings has been obsoleted. Use `SqlServerTransport.Subscriptions` i" +
        "nstead. Will be removed in version 8.0.0.", true)]
    public class SubscriptionSettings
    {
        public SubscriptionSettings() { }
    }
    public class SubscriptionTableName
    {
        public SubscriptionTableName(string table, string schema = null, string catalog = null) { }
    }
}