[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Transport.SqlServer.AcceptanceTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Transport.SqlServer.IntegrationTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Transport.SqlServer.TransportTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Transport.SqlServer.UnitTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.InteropServices.ComVisible(false)]
namespace NServiceBus
{
    public static class EndpointAddressConfiguration
    {
        public static void UseCatalogForEndpoint(this NServiceBus.RoutingSettings settings, string endpointName, string catalog) { }
        public static void UseSchemaForEndpoint(this NServiceBus.RoutingSettings settings, string endpointName, string schema) { }
    }
    public class ExpiredMessagesPurgerOptions
    {
        public int? PurgeBatchSize { get; set; }
        public bool PurgeOnStartup { get; set; }
    }
    public static class MessageDrivenPubSubCompatibilityModeConfiguration
    {
        public static NServiceBus.SubscriptionMigrationModeSettings EnableMessageDrivenPubSubCompatibilityMode(this NServiceBus.RoutingSettings routingSettings) { }
        public static NServiceBus.SubscriptionMigrationModeSettings EnableMessageDrivenPubSubCompatibilityMode(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions) { }
    }
    public static class PublishOptionsExtensions
    {
        public static void UseCustomSqlConnection(this NServiceBus.PublishOptions options, Microsoft.Data.SqlClient.SqlConnection connection) { }
        public static void UseCustomSqlTransaction(this NServiceBus.PublishOptions options, Microsoft.Data.SqlClient.SqlTransaction transaction) { }
    }
    public class QueuePeekerOptions
    {
        public System.TimeSpan Delay { get; set; }
        public int? MaxRecordsToPeek { get; set; }
    }
    public static class SendOptionsExtensions
    {
        public static void UseCustomSqlConnection(this NServiceBus.SendOptions options, Microsoft.Data.SqlClient.SqlConnection connection) { }
        public static void UseCustomSqlTransaction(this NServiceBus.SendOptions options, Microsoft.Data.SqlClient.SqlTransaction transaction) { }
    }
    public class SqlServerTransport : NServiceBus.Transport.TransportDefinition
    {
        public SqlServerTransport(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<Microsoft.Data.SqlClient.SqlConnection>> connectionFactory) { }
        public SqlServerTransport(string connectionString) { }
        public System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<Microsoft.Data.SqlClient.SqlConnection>> ConnectionFactory { get; }
        public string ConnectionString { get; }
        public bool CreateMessageBodyComputedColumn { get; set; }
        public string DefaultCatalog { get; set; }
        public string DefaultSchema { get; set; }
        public NServiceBus.Transport.SqlServer.DelayedDeliveryOptions DelayedDelivery { get; }
        public NServiceBus.ExpiredMessagesPurgerOptions ExpiredMessagesPurger { get; }
        public NServiceBus.QueuePeekerOptions QueuePeeker { get; set; }
        public NServiceBus.Transport.SqlServer.QueueSchemaAndCatalogOptions SchemaAndCatalog { get; }
        public NServiceBus.Transport.SqlServer.SubscriptionOptions Subscriptions { get; }
        public System.TimeSpan TimeToWaitBeforeTriggeringCircuitBreaker { get; set; }
        public NServiceBus.TransactionScopeOptions TransactionScope { get; }
        public override System.Collections.Generic.IReadOnlyCollection<NServiceBus.TransportTransactionMode> GetSupportedTransactionModes() { }
        public override System.Threading.Tasks.Task<NServiceBus.Transport.TransportInfrastructure> Initialize(NServiceBus.Transport.HostSettings hostSettings, NServiceBus.Transport.ReceiveSettings[] receivers, string[] sendingAddresses, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public static class SqlServerTransportSettingsExtensions
    {
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> ConnectionString(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, System.Func<string> connectionString) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> ConnectionString(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, string connectionString) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> CreateMessageBodyComputedColumn(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> DefaultCatalog(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, string catalogName) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> DefaultSchema(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, string schemaName) { }
        public static NServiceBus.Transport.SqlServer.DelayedDeliverySettings NativeDelayedDelivery(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> PurgeExpiredMessagesOnStartup(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, int? purgeBatchSize) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> QueuePeekerOptions(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, System.TimeSpan? delay = default, int? peekBatchSize = default) { }
        public static NServiceBus.Transport.SqlServer.SubscriptionSettings SubscriptionSettings(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> TimeToWaitBeforeTriggeringCircuitBreaker(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, System.TimeSpan waitTime) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> TransactionScopeOptions(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, System.TimeSpan? timeout = default, System.Transactions.IsolationLevel? isolationLevel = default) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> UseCatalogForEndpoint(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, string endpointName, string catalog) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> UseCatalogForQueue(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, string queueName, string catalog) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> UseCustomSqlConnectionFactory(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, System.Func<System.Threading.Tasks.Task<Microsoft.Data.SqlClient.SqlConnection>> sqlConnectionFactory) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> UseSchemaForEndpoint(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, string endpointName, string schema) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> UseSchemaForQueue(this NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> transportExtensions, string queueName, string schema) { }
        public static NServiceBus.TransportExtensions<NServiceBus.SqlServerTransport> UseTransport<T>(this NServiceBus.EndpointConfiguration config)
            where T : NServiceBus.SqlServerTransport { }
    }
    public class TransactionScopeOptions
    {
        public System.Transactions.IsolationLevel IsolationLevel { get; set; }
        public System.TimeSpan Timeout { get; set; }
    }
}
namespace NServiceBus.Transport.SqlServer
{
    public class DelayedDeliveryOptions
    {
        public int BatchSize { get; set; }
        public string TableSuffix { get; set; }
    }
    public class DelayedDeliverySettings
    {
        public void BatchSize(int batchSize) { }
        public void TableSuffix(string suffix) { }
    }
    public class QueueSchemaAndCatalogOptions
    {
        public void UseCatalogForQueue(string queueName, string catalog) { }
        public void UseSchemaForQueue(string queueName, string schema) { }
    }
    public class SubscriptionOptions
    {
        public SubscriptionOptions() { }
        public System.TimeSpan CacheInvalidationPeriod { get; set; }
        public bool DisableCaching { get; set; }
        public NServiceBus.Transport.SqlServer.SubscriptionTableName SubscriptionTableName { get; set; }
    }
    public class SubscriptionSettings
    {
        public void CacheSubscriptionInformationFor(System.TimeSpan timeSpan) { }
        public void DisableSubscriptionCache() { }
        public void SubscriptionTableName(string tableName, string schemaName = null, string catalogName = null) { }
    }
    public class SubscriptionTableName
    {
        public SubscriptionTableName(string table, string schema = null, string catalog = null) { }
    }
}